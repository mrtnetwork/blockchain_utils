import 'package:blockchain_utils/bip/algorand/mnemonic/algorand_mnemonic.dart';
import 'package:blockchain_utils/bip/algorand/mnemonic/algorand_mnemonic_decoder.dart';
import 'package:blockchain_utils/bip/mnemonic/mnemonic.dart';

/// Algorand seed generator class.
class AlgorandSeedGenerator {
  final List<int> _entropyBytes;

  /// The [AlgorandSeedGenerator] class is used to generate an Algorand seed
  /// from a mnemonic phrase. It takes a [mnemonic] as input, and an optional
  /// [language] parameter to specify the language of the mnemonic. By default,
  /// it uses the English language.
  ///
  /// The seed generated by this class is identical to the mnemonic's entropy
  /// bytes and is provided mainly for consistency with other seed generation
  /// methods in various libraries.
  ///
  /// Example usage:
  ///
  /// ```dart
  /// final mnemonic = AlgorandMnemonic.fromString("your mnemonic phrase here");
  /// final generator = AlgorandSeedGenerator(mnemonic);
  /// final seed = generator.generate();
  /// ```
  ///
  /// The [generate] method returns the Algorand seed, which is the same as the
  /// mnemonic's entropy bytes.
  AlgorandSeedGenerator(Mnemonic mnemonic,
      [AlgorandLanguages? language = AlgorandLanguages.english])
      : _entropyBytes =
            AlgorandMnemonicDecoder(language).decode(mnemonic.toStr());

  /// Generate seed. The seed is simply the entropy bytes in Algorand case.
  /// There is no real need for this method, since the seed is always the same, but it's
  /// kept in this way to have the same usage of Bip39/Substrate seed generator
  /// (i.e. AlgorandSeedGenerator(mnemonic).generate() ).
  List<int> generate() {
    return List<int>.from(_entropyBytes);
  }
}
